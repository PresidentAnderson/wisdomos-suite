name: CI - Build & Test All Editions

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PNPM_VERSION: 8

jobs:
  # Job 1: Build all packages and apps for all editions
  build:
    name: Build ${{ matrix.app }} (${{ matrix.edition }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        app: [web]
        edition: [personal, coach, org]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm turbo run build --filter=@wisdomos/config

      - name: Build app (${{ matrix.edition }})
        run: pnpm turbo run build --filter=apps/${{ matrix.app }}
        env:
          EDITION: ${{ matrix.edition }}
          NEXT_PUBLIC_EDITION: ${{ matrix.edition }}

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}-${{ matrix.edition }}
          path: apps/${{ matrix.app }}/.next
          retention-days: 7

  # Job 2: Run tests
  test:
    name: Test ${{ matrix.edition }}
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        edition: [personal, coach, org]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm turbo run test
        env:
          EDITION: ${{ matrix.edition }}

  # Job 3: Lint and type-check
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm turbo run lint

      - name: Run type-check
        run: pnpm turbo run type-check

  # Job 4: Deploy web (personal edition only for now)
  deploy-web:
    name: Deploy Web (Personal)
    runs-on: ubuntu-latest
    needs: [build, test, quality]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: pnpm turbo run build --filter=apps/web
        env:
          EDITION: personal
          NEXT_PUBLIC_EDITION: personal
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: './apps/web/.next'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions (Personal Edition)"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
