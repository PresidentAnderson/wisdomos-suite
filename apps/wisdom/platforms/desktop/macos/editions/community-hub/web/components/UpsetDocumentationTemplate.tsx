'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FileText, Calendar, MapPin, Users, Heart, AlertTriangle,
  Brain, RefreshCw, CheckCircle, Save, Send, Download,
  Clock, Tag, TrendingUp, Layers, Shield, PenTool,
  Circle, ChevronRight, X, Copy, Share2, Archive
} from 'lucide-react';

interface UpsetEntry {
  id: string;
  timestamp: Date;
  facts: string;
  feltExperience: {
    emotion: string;
    alwaysNeverStory: string;
  };
  lifeArea: string;
  boundary: {
    type: string;
    status: 'green' | 'yellow' | 'red';
    description: string;
  };
  origin: {
    earliestMemory: string;
    meaningMade: string;
    age?: number;
  };
  reframe: {
    pastStrategy: string;
    acknowledgment: string;
    newChoice: string;
  };
  reset: {
    violation: string;
    forgiveness: string;
    recommitment: string;
    recalibration: string;
  };
}

const LIFE_AREAS = [
  'Health', 'Finance', 'Intimacy', 'Partnership', 'Family',
  'Friends', 'Career', 'Creativity', 'Recreation', 'Environment',
  'Community', 'Spirituality', 'Personal Growth'
];

const EMOTIONS = [
  'Angry', 'Sad', 'Fearful', 'Disappointed', 'Frustrated',
  'Dismissed', 'Powerless', 'Betrayed', 'Abandoned', 'Overwhelmed',
  'Anxious', 'Confused', 'Hurt', 'Rejected', 'Ashamed'
];

const BOUNDARY_TYPES = [
  'Overextending myself',
  'Tolerating disrespect',
  'Not speaking up',
  'Saying yes when I mean no',
  'Taking on others\' responsibilities',
  'Ignoring my needs',
  'Compromising my values',
  'Allowing interruptions',
  'Not asking for help',
  'Accepting less than I deserve'
];

export default function UpsetDocumentationTemplate() {
  const [currentStep, setCurrentStep] = useState(1);
  const [entry, setEntry] = useState<Partial<UpsetEntry>>({
    timestamp: new Date(),
    facts: '',
    feltExperience: {
      emotion: '',
      alwaysNeverStory: ''
    },
    lifeArea: '',
    boundary: {
      type: '',
      status: 'yellow',
      description: ''
    },
    origin: {
      earliestMemory: '',
      meaningMade: '',
      age: undefined
    },
    reframe: {
      pastStrategy: '',
      acknowledgment: '',
      newChoice: ''
    },
    reset: {
      violation: '',
      forgiveness: '',
      recommitment: '',
      recalibration: ''
    }
  });

  const [savedEntries, setSavedEntries] = useState<UpsetEntry[]>([]);
  const [showSuccess, setShowSuccess] = useState(false);

  const steps = [
    { id: 1, title: 'Capture the Facts', icon: <FileText className="w-5 h-5" /> },
    { id: 2, title: 'Note the Felt Experience', icon: <Heart className="w-5 h-5" /> },
    { id: 3, title: 'Locate Life Area + Boundary', icon: <Layers className="w-5 h-5" /> },
    { id: 4, title: 'Trace the Origin', icon: <Clock className="w-5 h-5" /> },
    { id: 5, title: 'Acknowledge & Reframe', icon: <Brain className="w-5 h-5" /> },
    { id: 6, title: 'Reset & Recommit', icon: <RefreshCw className="w-5 h-5" /> }
  ];

  const handleSave = () => {
    const completeEntry: UpsetEntry = {
      ...entry as UpsetEntry,
      id: `upset-${Date.now()}`,
      timestamp: new Date()
    };
    
    setSavedEntries([...savedEntries, completeEntry]);
    setShowSuccess(true);
    setTimeout(() => setShowSuccess(false), 3000);
    
    // In a real app, this would save to database
    console.log('Saving upset documentation:', completeEntry);
  };

  const exportAsMarkdown = () => {
    const md = `# Upset Documentation
Date: ${entry.timestamp?.toLocaleString()}

## 1. Facts (No Story)
${entry.facts}

## 2. Felt Experience
**Emotion:** ${entry.feltExperience?.emotion}
**Always/Never Story:** ${entry.feltExperience?.alwaysNeverStory}

## 3. Life Area & Boundary
**Life Area:** ${entry.lifeArea}
**Boundary Type:** ${entry.boundary?.type}
**Status:** ${entry.boundary?.status?.toUpperCase()} ðŸ”´
**Description:** ${entry.boundary?.description}

## 4. Origin Pattern
**Earliest Memory:** ${entry.origin?.earliestMemory}
**Age:** ${entry.origin?.age || 'Not specified'}
**Meaning Made Then:** ${entry.origin?.meaningMade}

## 5. Acknowledgment & Reframe
**Past Strategy:** ${entry.reframe?.pastStrategy}
**Acknowledgment:** ${entry.reframe?.acknowledgment}
**New Choice:** ${entry.reframe?.newChoice}

## 6. Reset & Recommitment
**Violation Identified:** ${entry.reset?.violation}
**Self-Forgiveness:** ${entry.reset?.forgiveness}
**Recommitment:** ${entry.reset?.recommitment}
**Recalibration:** ${entry.reset?.recalibration}

---
Generated by WisdomOS Upset Documentation Template`;

    const blob = new Blob([md], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `upset-${Date.now()}.md`;
    a.click();
  };

  const getBoundaryColor = (status: string) => {
    switch (status) {
      case 'green': return 'bg-green-500';
      case 'yellow': return 'bg-yellow-500';
      case 'red': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white dark:bg-gray-900 rounded-xl shadow-lg">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-black dark:text-black mb-2">
          Upset Documentation Template
        </h1>
        <p className="text-black dark:text-black">
          Transform upsets into clarity and growth opportunities
        </p>
      </div>

      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          {steps.map((step, index) => (
            <div key={step.id} className="flex items-center">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setCurrentStep(step.id)}
                className={`
                  flex items-center justify-center w-12 h-12 rounded-full
                  ${currentStep >= step.id
                    ? 'bg-purple-600 text-black'
                    : 'bg-gray-200 dark:bg-gray-700 text-black'
                  }
                  transition-colors cursor-pointer
                `}
              >
                {step.icon}
              </motion.button>
              {index < steps.length - 1 && (
                <div className={`
                  w-full h-1 mx-2
                  ${currentStep > step.id
                    ? 'bg-purple-600'
                    : 'bg-gray-200 dark:bg-gray-700'
                  }
                `} />
              )}
            </div>
          ))}
        </div>
        <div className="flex justify-between mt-2">
          {steps.map((step) => (
            <p key={step.id} className="text-xs text-black dark:text-black max-w-[100px] text-center">
              {step.title}
            </p>
          ))}
        </div>
      </div>

      {/* Form Content */}
      <AnimatePresence mode="wait">
        <motion.div
          key={currentStep}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          transition={{ duration: 0.3 }}
          className="space-y-6"
        >
          {/* Step 1: Capture the Facts */}
          {currentStep === 1 && (
            <div className="space-y-4">
              <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                <h3 className="font-semibold text-black dark:text-black mb-2">
                  Step 1: Capture the Facts (No Story First)
                </h3>
                <p className="text-sm text-black dark:text-black">
                  Write what actually happened â€” who was there, what was said or done, without adding judgment or interpretation.
                </p>
                <p className="text-sm text-black dark:text-black mt-2 italic">
                  Example: "I told Michael about the invoice. He responded by laughing and walking away."
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  What happened? (Just the facts)
                </label>
                <textarea
                  value={entry.facts}
                  onChange={(e) => setEntry({ ...entry, facts: e.target.value })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={4}
                  placeholder="Describe only what was observable..."
                />
              </div>
            </div>
          )}

          {/* Step 2: Note the Felt Experience */}
          {currentStep === 2 && (
            <div className="space-y-4">
              <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
                <h3 className="font-semibold text-black dark:text-black mb-2">
                  Step 2: Note the Felt Experience
                </h3>
                <p className="text-sm text-black dark:text-black">
                  Identify your emotion and the familiar "always/never" story that shows up.
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  Primary Emotion
                </label>
                <div className="grid grid-cols-3 gap-2 mb-4">
                  {EMOTIONS.map((emotion) => (
                    <button
                      key={emotion}
                      onClick={() => setEntry({
                        ...entry,
                        feltExperience: { ...entry.feltExperience!, emotion }
                      })}
                      className={`
                        px-3 py-2 rounded-lg text-sm transition-colors
                        ${entry.feltExperience?.emotion === emotion
                          ? 'bg-purple-600 text-black'
                          : 'bg-gray-100 dark:bg-gray-800 text-black dark:text-black hover:bg-gray-200 dark:hover:bg-gray-700'
                        }
                      `}
                    >
                      {emotion}
                    </button>
                  ))}
                </div>
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  The Always/Never Story
                </label>
                <textarea
                  value={entry.feltExperience?.alwaysNeverStory}
                  onChange={(e) => setEntry({
                    ...entry,
                    feltExperience: { ...entry.feltExperience!, alwaysNeverStory: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={3}
                  placeholder="e.g., 'People never take me seriously' or 'I always have to do everything myself'"
                />
              </div>
            </div>
          )}

          {/* Step 3: Locate Life Area + Boundary */}
          {currentStep === 3 && (
            <div className="space-y-4">
              <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                <h3 className="font-semibold text-black dark:text-black mb-2">
                  Step 3: Locate the Life Area + Boundary
                </h3>
                <p className="text-sm text-black dark:text-black">
                  Connect the upset to one of your Life Areas and identify any boundary drift.
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  Life Area
                </label>
                <div className="grid grid-cols-3 gap-2 mb-4">
                  {LIFE_AREAS.map((area) => (
                    <button
                      key={area}
                      onClick={() => setEntry({ ...entry, lifeArea: area })}
                      className={`
                        px-3 py-2 rounded-lg text-sm transition-colors
                        ${entry.lifeArea === area
                          ? 'bg-purple-600 text-black'
                          : 'bg-gray-100 dark:bg-gray-800 text-black dark:text-black hover:bg-gray-200 dark:hover:bg-gray-700'
                        }
                      `}
                    >
                      {area}
                    </button>
                  ))}
                </div>
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  Boundary Type
                </label>
                <select
                  value={entry.boundary?.type}
                  onChange={(e) => setEntry({
                    ...entry,
                    boundary: { ...entry.boundary!, type: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent mb-4"
                >
                  <option value="">Select boundary type...</option>
                  {BOUNDARY_TYPES.map((type) => (
                    <option key={type} value={type}>{type}</option>
                  ))}
                </select>
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  Boundary Status
                </label>
                <div className="flex gap-4 mb-4">
                  {['green', 'yellow', 'red'].map((status) => (
                    <button
                      key={status}
                      onClick={() => setEntry({
                        ...entry,
                        boundary: { ...entry.boundary!, status: status as any }
                      })}
                      className={`
                        flex items-center gap-2 px-4 py-2 rounded-lg transition-colors
                        ${entry.boundary?.status === status
                          ? 'ring-2 ring-purple-600'
                          : ''
                        }
                      `}
                    >
                      <div className={`w-6 h-6 rounded-full ${getBoundaryColor(status)}`} />
                      <span className="capitalize text-black dark:text-black">{status}</span>
                    </button>
                  ))}
                </div>
                
                <textarea
                  value={entry.boundary?.description}
                  onChange={(e) => setEntry({
                    ...entry,
                    boundary: { ...entry.boundary!, description: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={2}
                  placeholder="Describe the boundary situation..."
                />
              </div>
            </div>
          )}

          {/* Step 4: Trace the Origin */}
          {currentStep === 4 && (
            <div className="space-y-4">
              <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg">
                <h3 className="font-semibold text-black dark:text-black mb-2">
                  Step 4: Trace the Origin
                </h3>
                <p className="text-sm text-black dark:text-black">
                  When have you felt this way before? Record the earliest memory and what meaning you made then.
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  Earliest Memory of This Dynamic
                </label>
                <textarea
                  value={entry.origin?.earliestMemory}
                  onChange={(e) => setEntry({
                    ...entry,
                    origin: { ...entry.origin!, earliestMemory: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={3}
                  placeholder="Describe the earliest time you remember feeling this way..."
                />
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2 mt-4">
                  Age (optional)
                </label>
                <input
                  type="number"
                  value={entry.origin?.age || ''}
                  onChange={(e) => setEntry({
                    ...entry,
                    origin: { ...entry.origin!, age: parseInt(e.target.value) }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  placeholder="How old were you?"
                />
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2 mt-4">
                  What Meaning Did You Make Then?
                </label>
                <textarea
                  value={entry.origin?.meaningMade}
                  onChange={(e) => setEntry({
                    ...entry,
                    origin: { ...entry.origin!, meaningMade: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={3}
                  placeholder="What did you decide about yourself, others, or life?"
                />
              </div>
            </div>
          )}

          {/* Step 5: Acknowledge & Reframe */}
          {currentStep === 5 && (
            <div className="space-y-4">
              <div className="bg-indigo-50 dark:bg-indigo-900/20 p-4 rounded-lg">
                <h3 className="font-semibold text-black dark:text-black mb-2">
                  Step 5: Acknowledge & Reframe
                </h3>
                <p className="text-sm text-black dark:text-black">
                  Acknowledge your past strategy was intelligent then, but choose a new way forward.
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  Past Strategy
                </label>
                <textarea
                  value={entry.reframe?.pastStrategy}
                  onChange={(e) => setEntry({
                    ...entry,
                    reframe: { ...entry.reframe!, pastStrategy: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={2}
                  placeholder="How did you react or cope in the past?"
                />
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2 mt-4">
                  Acknowledgment
                </label>
                <textarea
                  value={entry.reframe?.acknowledgment}
                  onChange={(e) => setEntry({
                    ...entry,
                    reframe: { ...entry.reframe!, acknowledgment: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={2}
                  placeholder="e.g., 'Back then it was intelligent. Today it's unnecessary.'"
                />
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2 mt-4">
                  New Choice
                </label>
                <textarea
                  value={entry.reframe?.newChoice}
                  onChange={(e) => setEntry({
                    ...entry,
                    reframe: { ...entry.reframe!, newChoice: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={2}
                  placeholder="e.g., 'I can speak up instead of retreating.'"
                />
              </div>
            </div>
          )}

          {/* Step 6: Reset & Recommit */}
          {currentStep === 6 && (
            <div className="space-y-4">
              <div className="bg-rose-50 dark:bg-rose-900/20 p-4 rounded-lg">
                <h3 className="font-semibold text-black dark:text-black mb-2">
                  Step 6: Reset & Recommit
                </h3>
                <p className="text-sm text-black dark:text-black">
                  Use the Boundary Reset Ritual: pause, identify violation, forgive yourself, recommit, recalibrate.
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-black dark:text-black mb-2">
                  Violation Identified
                </label>
                <textarea
                  value={entry.reset?.violation}
                  onChange={(e) => setEntry({
                    ...entry,
                    reset: { ...entry.reset!, violation: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={2}
                  placeholder="What boundary was violated?"
                />
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2 mt-4">
                  Self-Forgiveness
                </label>
                <textarea
                  value={entry.reset?.forgiveness}
                  onChange={(e) => setEntry({
                    ...entry,
                    reset: { ...entry.reset!, forgiveness: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={2}
                  placeholder="How do you forgive yourself?"
                />
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2 mt-4">
                  Recommitment
                </label>
                <textarea
                  value={entry.reset?.recommitment}
                  onChange={(e) => setEntry({
                    ...entry,
                    reset: { ...entry.reset!, recommitment: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={2}
                  placeholder={`In ${entry.lifeArea || '[Life Area]'}, I now recommit to...`}
                />
                
                <label className="block text-sm font-medium text-black dark:text-black mb-2 mt-4">
                  Recalibration
                </label>
                <textarea
                  value={entry.reset?.recalibration}
                  onChange={(e) => setEntry({
                    ...entry,
                    reset: { ...entry.reset!, recalibration: e.target.value }
                  })}
                  className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-black dark:text-black focus:ring-2 focus:ring-purple-600 focus:border-transparent"
                  rows={2}
                  placeholder="How will you adjust your approach?"
                />
              </div>
            </div>
          )}
        </motion.div>
      </AnimatePresence>

      {/* Navigation Buttons */}
      <div className="flex justify-between mt-8">
        <button
          onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
          disabled={currentStep === 1}
          className={`
            px-6 py-3 rounded-lg font-medium transition-colors
            ${currentStep === 1
              ? 'bg-gray-200 dark:bg-gray-700 text-black cursor-not-allowed'
              : 'bg-gray-100 dark:bg-gray-800 text-black dark:text-black hover:bg-gray-200 dark:hover:bg-gray-700'
            }
          `}
        >
          Previous
        </button>
        
        {currentStep < 6 ? (
          <button
            onClick={() => setCurrentStep(Math.min(6, currentStep + 1))}
            className="px-6 py-3 bg-purple-600 text-black rounded-lg font-medium hover:bg-purple-700 transition-colors"
          >
            Next Step
          </button>
        ) : (
          <div className="flex gap-3">
            <button
              onClick={exportAsMarkdown}
              className="px-6 py-3 bg-gray-600 text-black rounded-lg font-medium hover:bg-gray-700 transition-colors flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </button>
            <button
              onClick={handleSave}
              className="px-6 py-3 bg-purple-600 text-black rounded-lg font-medium hover:bg-purple-700 transition-colors flex items-center gap-2"
            >
              <Save className="w-4 h-4" />
              Save & Send to Autobiography
            </button>
          </div>
        )}
      </div>

      {/* Success Message */}
      <AnimatePresence>
        {showSuccess && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="fixed bottom-8 right-8 bg-green-600 text-black px-6 py-3 rounded-lg shadow-lg flex items-center gap-2"
          >
            <CheckCircle className="w-5 h-5" />
            Upset documentation saved successfully!
          </motion.div>
        )}
      </AnimatePresence>

      {/* Integration Notice */}
      <div className="mt-8 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
        <h4 className="font-semibold text-black dark:text-black mb-2">
          âœ… This upset becomes:
        </h4>
        <ul className="space-y-2 text-sm text-black dark:text-black">
          <li className="flex items-center gap-2">
            <Archive className="w-4 h-4 text-black" />
            A journal entry (goes into your Autobiography for long-term analysis)
          </li>
          <li className="flex items-center gap-2">
            <TrendingUp className="w-4 h-4 text-black" />
            A dashboard signal (updates your Fulfillment Display color-coding)
          </li>
          <li className="flex items-center gap-2">
            <RefreshCw className="w-4 h-4 text-black" />
            A practice (recommitment + reset ritual)
          </li>
        </ul>
      </div>
    </div>
  );
}