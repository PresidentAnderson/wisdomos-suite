name: 🔥 WisdomOS API - CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'

# Cancel previous workflow runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'registry.railway.app'

jobs:
  # ========================================
  # Code Quality & Security Checks
  # ========================================
  
  quality:
    name: 🔍 Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: wisdomos
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: wisdomos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Audit dependencies
        run: npm audit --audit-level high

      - name: 📊 Type checking
        run: npm run typecheck

      - name: 🎨 Code formatting check
        run: npx prettier --check "src/**/*.{ts,js,json}"

      - name: 🧹 Lint code
        run: npm run lint:check

      - name: 🗃️ Database Migration Check
        env:
          DATABASE_URL: postgresql://wisdomos:test_password@localhost:5432/wisdomos_test
        run: |
          npx prisma generate
          npx prisma db push --skip-generate

      - name: 📈 SonarCloud Scan
        if: github.actor != 'dependabot[bot]'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 🛡️ CodeQL Security Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: 🏗️ Build for CodeQL
        env:
          DATABASE_URL: postgresql://wisdomos:test_password@localhost:5432/wisdomos_test
          JWT_SECRET: test_jwt_secret
          REDIS_URL: redis://localhost:6379
        run: npm run build

      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ========================================
  # Test Suite
  # ========================================
  
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        node-version: [18, 20]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: wisdomos
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: wisdomos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🗃️ Setup test database
        env:
          DATABASE_URL: postgresql://wisdomos:test_password@localhost:5432/wisdomos_test
        run: |
          npx prisma generate
          npx prisma db push --skip-generate

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://wisdomos:test_password@localhost:5432/wisdomos_test
          JWT_SECRET: test_jwt_secret
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: npm run test:cov

      - name: 🧪 Run integration tests
        env:
          DATABASE_URL: postgresql://wisdomos:test_password@localhost:5432/wisdomos_test
          JWT_SECRET: test_jwt_secret
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: npm run test:e2e

      - name: 📊 Upload coverage to Codecov
        if: matrix.node-version == 18
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: wisdomos-api
          name: WisdomOS API Coverage
          fail_ci_if_error: true

      - name: 📈 Coverage Report
        if: matrix.node-version == 18
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  # ========================================
  # Security Scanning
  # ========================================
  
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🛡️ OSSAR Security Scan
        uses: github/ossar-action@v1
        id: ossar

      - name: 📤 Upload OSSAR results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}

      - name: 🐳 Docker Security Scan
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t wisdomos-api:test .
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/root/.cache/ aquasec/trivy:latest image \
            --exit-code 1 --severity HIGH,CRITICAL wisdomos-api:test

  # ========================================
  # Build & Package
  # ========================================
  
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build application
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wisdomos-api-build
          path: |
            dist/
            package*.json
            prisma/
          retention-days: 7

  # ========================================
  # Docker Build & Push
  # ========================================
  
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build, security]
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.RAILWAY_TOKEN }}
          password: ${{ secrets.RAILWAY_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/wisdomos-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ========================================
  # Deploy to Railway
  # ========================================
  
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 10
    environment:
      name: staging
      url: https://api-staging.wisdomos.app
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Railway (Staging)
        uses: railway-app/deploy@v1
        with:
          token: ${{ secrets.RAILWAY_TOKEN }}
          project: ${{ secrets.RAILWAY_PROJECT_ID }}
          environment: staging
          service: wisdomos-api

      - name: 🏥 Health Check
        run: |
          sleep 30
          curl -f https://api-staging.wisdomos.app/health || exit 1

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    environment:
      name: production
      url: https://api.wisdomos.app
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Railway (Production)
        uses: railway-app/deploy@v1
        with:
          token: ${{ secrets.RAILWAY_TOKEN }}
          project: ${{ secrets.RAILWAY_PROJECT_ID }}
          environment: production
          service: wisdomos-api

      - name: 🗃️ Run Database Migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npm ci --only=production
          npx prisma migrate deploy

      - name: 🏥 Health Check
        run: |
          sleep 45
          for i in {1..5}; do
            if curl -f https://api.wisdomos.app/health; then
              echo "Health check passed"
              break
            fi
            echo "Health check failed, attempt $i/5"
            sleep 10
          done

      - name: 🏷️ Create deployment tag
        if: success()
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "deploy-$(date +'%Y%m%d-%H%M%S')" -m "Production deployment $(date)"
          git push origin --tags

  # ========================================
  # Deployment Notification
  # ========================================
  
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
      - name: 🟢 Success Notification
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🚀 *WisdomOS API* successfully deployed!
            🌍 Environment: ${{ needs.deploy-production.result == 'success' && 'Production' || 'Staging' }}
            🌿 Branch: ${{ github.ref_name }}
            👤 Author: ${{ github.actor }}
            🔗 URL: ${{ needs.deploy-production.result == 'success' && 'https://api.wisdomos.app' || 'https://api-staging.wisdomos.app' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🔴 Failure Notification
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ❌ *WisdomOS API* deployment failed!
            🌍 Environment: ${{ needs.deploy-production.result == 'failure' && 'Production' || 'Staging' }}
            🌿 Branch: ${{ github.ref_name }}
            👤 Author: ${{ github.actor }}
            🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}