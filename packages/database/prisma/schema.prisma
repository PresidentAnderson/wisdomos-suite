// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  avatar    String?
  
  // Authentication
  passwordHash String?
  emailVerified DateTime?
  
  // Phoenix profile
  phoenixName String? // Their chosen phoenix identity
  currentStage PhoenixStage @default(ASHES)
  cycleCount  Int @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  journalEntries JournalEntry[]
  lifeAreas     LifeArea[]
  phoenixCycles PhoenixCycle[]
  achievements  Achievement[]
  
  @@map("users")
}

// Phoenix cycle stages
enum PhoenixStage {
  ASHES      // Reflection phase
  FIRE       // Breakthrough phase  
  REBIRTH    // Fulfillment phase
  FLIGHT     // Legacy phase
}

// Phoenix cycle tracking
model PhoenixCycle {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Cycle metadata
  cycleNumber Int
  stage       PhoenixStage
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  // Cycle data
  ashesReflection   String? // What they're leaving behind
  fireBreakthrough  String? // Their breakthrough moment
  rebirthVision     String? // Their new vision
  flightLegacy      String? // Their contribution
  
  // Progress tracking
  completionScore   Float @default(0)
  stageProgress     Json? // Detailed stage progress
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("phoenix_cycles")
}

// Life areas tracking
model LifeArea {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Area details
  name        String // e.g., "Health", "Relationships", "Career"
  phoenixName String // e.g., "Phoenix of Vitality", "Phoenix of Connection"
  description String?
  icon        String? // Icon identifier
  color       String? // Color theme
  
  // Status tracking
  status      LifeAreaStatus @default(BREAKDOWN)
  score       Float @default(0) // 0-100 score
  lastReview  DateTime?
  
  // Goal tracking
  currentGoal     String?
  goalProgress    Float @default(0)
  goalDeadline    DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  journalEntries JournalEntry[]
  
  @@map("life_areas")
}

enum LifeAreaStatus {
  BREAKDOWN  // Red - needs attention
  ATTENTION  // Yellow - progressing but needs work
  THRIVING   // Green - doing well
}

// Journal entries
model JournalEntry {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Entry content
  title       String?
  content     String
  mood        Int? // 1-10 mood scale
  energy      Int? // 1-10 energy scale
  
  // Phoenix categorization
  stage       PhoenixStage?
  lifeAreaId  String?
  lifeArea    LifeArea? @relation(fields: [lifeAreaId], references: [id], onDelete: SetNull)
  
  // Entry metadata
  type        EntryType @default(REFLECTION)
  tags        String[] // Array of tags
  isPrivate   Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("journal_entries")
}

enum EntryType {
  REFLECTION    // General reflection
  GRATITUDE     // Gratitude entry
  BREAKTHROUGH  // Breakthrough moment
  GOAL_SETTING  // Goal planning
  PROGRESS      // Progress update
  CHALLENGE     // Challenge or struggle
}

// Achievement system
model Achievement {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Achievement details
  type        AchievementType
  title       String
  description String
  icon        String
  points      Int @default(0)
  
  // Unlock conditions
  unlockedAt DateTime @default(now())
  condition  String? // Description of how it was earned
  
  @@map("achievements")
}

enum AchievementType {
  FIRST_JOURNAL     // First journal entry
  CYCLE_COMPLETE    // Complete a full phoenix cycle
  STREAK_7_DAYS     // 7-day journaling streak
  STREAK_30_DAYS    // 30-day journaling streak
  LIFE_AREA_MASTER  // Max out a life area
  PHOENIX_RISEN     // Complete 10 cycles
  BREAKTHROUGH      // Major breakthrough moment
  GRATITUDE_MASTER  // 100 gratitude entries
  GOAL_ACHIEVER     // Complete 5 goals
  REFLECTION_SAGE   // 1000 reflections
}