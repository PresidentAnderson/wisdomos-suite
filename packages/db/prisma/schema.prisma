generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  passwordHash  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  lifeAreas     LifeArea[]
  journals      Journal[]
  relationships Relationship[]
  resets        Reset[]
  vault         Vault[]
  badges        Badge[]
  
  @@map("users")
}

model LifeArea {
  id            String         @id @default(uuid())
  userId        String
  name          String
  phoenixName   String?        // "Your Sacred Fire", etc.
  status        LifeStatus     @default(GREEN)
  score         Int            @default(0)
  sortOrder     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  journals      Journal[]
  resets        Reset[]
  relationships Relationship[]
  events        Event[]
  
  @@unique([userId, name])
  @@index([userId])
  @@map("life_areas")
}

enum LifeStatus {
  GREEN
  YELLOW
  RED
}

model Journal {
  id            String         @id @default(uuid())
  userId        String
  lifeAreaId    String
  content       String         @db.Text
  upsetDetected Boolean        @default(false)
  aiReframe     String?        @db.Text
  tags          String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  lifeArea      LifeArea       @relation(fields: [lifeAreaId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([lifeAreaId])
  @@map("journals")
}

model Event {
  id            String         @id @default(uuid())
  userId        String
  lifeAreaId    String
  type          EventType
  impact        Int            // -2 to +2
  title         String
  notes         String?        @db.Text
  occurredAt    DateTime       @default(now())
  createdAt     DateTime       @default(now())
  
  lifeArea      LifeArea       @relation(fields: [lifeAreaId], references: [id], onDelete: Cascade)
  
  @@index([userId, occurredAt])
  @@index([lifeAreaId, occurredAt])
  @@index([type])
  @@map("events")
}

enum EventType {
  WIN
  COMMITMENT_KEPT
  COMMITMENT_BROKEN
  UPSET
  INSIGHT
  BOUNDARY_RESET
  TASK_COMPLETED
  TASK_MISSED
}

model Relationship {
  id            String         @id @default(uuid())
  userId        String
  lifeAreaId    String
  name          String
  frequency     Int            @default(5) // 1-10 scale
  notes         String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  lifeArea      LifeArea       @relation(fields: [lifeAreaId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([lifeAreaId])
  @@map("relationships")
}

model Reset {
  id            String         @id @default(uuid())
  userId        String
  lifeAreaId    String
  
  // 5-step reset ritual
  step1_pause   String?        @db.Text
  step2_identify String?       @db.Text
  step3_acknowledge String?    @db.Text
  step4_recommit String?       @db.Text
  step5_recalibrate String?    @db.Text
  
  completed     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  completedAt   DateTime?
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  lifeArea      LifeArea       @relation(fields: [lifeAreaId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([lifeAreaId])
  @@map("resets")
}

model Badge {
  id            String         @id @default(uuid())
  userId        String
  type          BadgeType
  name          String
  description   String
  icon          String         // emoji
  color         String         // hex color
  rarity        Rarity
  progress      Int            @default(0)
  maxProgress   Int
  unlocked      Boolean        @default(false)
  unlockedAt    DateTime?
  createdAt     DateTime       @default(now())
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type])
  @@index([userId, unlocked])
  @@map("badges")
}

enum BadgeType {
  ASHES_MASTER
  FLAME_WALKER
  RISING_STAR
  FULL_FLIGHT
  BOUNDARY_GUARDIAN
  TRANSFORMATION_CATALYST
  PHOENIX_BORN
  ETERNAL_FLAME
}

enum Rarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

model Vault {
  id            String         @id @default(uuid())
  userId        String
  title         String
  content       String         @db.Text
  category      String?
  accessLevel   AccessLevel    @default(PRIVATE)
  tags          String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, accessLevel])
  @@index([userId, createdAt])
  @@map("vault_items")
}

enum AccessLevel {
  PRIVATE
  SHARED
  PUBLIC
}