# GitLab CI/CD Pipeline for WisdomOS Phase 3

stages:
  - build
  - test
  - security
  - docker
  - deploy

variables:
  NODE_VERSION: "18"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  IMAGE_TAG: $CI_COMMIT_SHA

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .pnpm-store/
    - node_modules/

# Install dependencies
install:
  stage: build
  image: node:18-alpine
  before_script:
    - npm install -g pnpm
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm install --frozen-lockfile
  artifacts:
    paths:
      - node_modules/
      - .pnpm-store/
    expire_in: 1 hour

# Lint and type checking
lint:
  stage: test
  image: node:18-alpine
  dependencies:
    - install
  script:
    - npm install -g pnpm
    - pnpm lint
    - pnpm type-check
  only:
    - main
    - develop
    - merge_requests

# Unit tests
test:unit:
  stage: test
  image: node:18-alpine
  dependencies:
    - install
  services:
    - postgres:15
    - redis:7
  variables:
    POSTGRES_DB: wisdomos_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DATABASE_URL: postgresql://postgres:postgres@postgres:5432/wisdomos_test
    REDIS_URL: redis://redis:6379
  script:
    - npm install -g pnpm
    - pnpm test
  coverage: '/Coverage: \d+\.\d+%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

# Build applications
build:packages:
  stage: build
  image: node:18-alpine
  dependencies:
    - install
  script:
    - npm install -g pnpm
    - pnpm --filter @wisdomos/contrib build
    - pnpm --filter @wisdomos/legacy build
  artifacts:
    paths:
      - packages/*/dist/
    expire_in: 1 hour
  only:
    - main
    - develop

build:apps:
  stage: build
  image: node:18-alpine
  dependencies:
    - install
    - build:packages
  script:
    - npm install -g pnpm
    - pnpm --filter @wisdomos/api build
    - pnpm --filter @wisdomos/web build
    - pnpm --filter @wisdomos/community build
  artifacts:
    paths:
      - apps/*/dist/
      - apps/*/.next/
    expire_in: 1 hour
  only:
    - main
    - develop

# Security scanning
security:audit:
  stage: security
  image: node:18-alpine
  dependencies:
    - install
  script:
    - npm install -g pnpm
    - pnpm audit --audit-level moderate
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

security:trivy:
  stage: security
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - trivy fs --exit-code 0 --no-progress .
  allow_failure: true
  only:
    - main
    - develop

# Docker image builds
docker:api:
  stage: docker
  image: docker:stable
  services:
    - docker:dind
  dependencies:
    - build:apps
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --target api -t $REGISTRY/$CI_PROJECT_PATH/api:$IMAGE_TAG .
    - docker push $REGISTRY/$CI_PROJECT_PATH/api:$IMAGE_TAG
    - docker tag $REGISTRY/$CI_PROJECT_PATH/api:$IMAGE_TAG $REGISTRY/$CI_PROJECT_PATH/api:latest
    - docker push $REGISTRY/$CI_PROJECT_PATH/api:latest
  only:
    - main

docker:web:
  stage: docker
  image: docker:stable
  services:
    - docker:dind
  dependencies:
    - build:apps
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --target web -t $REGISTRY/$CI_PROJECT_PATH/web:$IMAGE_TAG .
    - docker push $REGISTRY/$CI_PROJECT_PATH/web:$IMAGE_TAG
    - docker tag $REGISTRY/$CI_PROJECT_PATH/web:$IMAGE_TAG $REGISTRY/$CI_PROJECT_PATH/web:latest
    - docker push $REGISTRY/$CI_PROJECT_PATH/web:latest
  only:
    - main

docker:community:
  stage: docker
  image: docker:stable
  services:
    - docker:dind
  dependencies:
    - build:apps
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --target community -t $REGISTRY/$CI_PROJECT_PATH/community:$IMAGE_TAG .
    - docker push $REGISTRY/$CI_PROJECT_PATH/community:$IMAGE_TAG
    - docker tag $REGISTRY/$CI_PROJECT_PATH/community:$IMAGE_TAG $REGISTRY/$CI_PROJECT_PATH/community:latest
    - docker push $REGISTRY/$CI_PROJECT_PATH/community:latest
  only:
    - main

# Deploy to staging
deploy:staging:
  stage: deploy
  image: alpine:latest
  dependencies:
    - docker:api
    - docker:web
    - docker:community
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_SERVER >> ~/.ssh/known_hosts
  script:
    - |
      ssh $STAGING_USER@$STAGING_SERVER << 'EOF'
        cd /opt/wisdomos-staging
        
        # Pull latest images
        docker pull $REGISTRY/$CI_PROJECT_PATH/api:$IMAGE_TAG
        docker pull $REGISTRY/$CI_PROJECT_PATH/web:$IMAGE_TAG
        docker pull $REGISTRY/$CI_PROJECT_PATH/community:$IMAGE_TAG
        
        # Update docker-compose
        sed -i "s|api:.*|api:$IMAGE_TAG|g" docker-compose.yml
        sed -i "s|web:.*|web:$IMAGE_TAG|g" docker-compose.yml
        sed -i "s|community:.*|community:$IMAGE_TAG|g" docker-compose.yml
        
        # Deploy
        docker-compose up -d
        
        # Health check
        sleep 30
        curl -f http://localhost:3000/health
        curl -f http://localhost:3001/health
        curl -f http://localhost:3002/health
      EOF
  environment:
    name: staging
    url: https://staging.wisdomos.com
  only:
    - main

# Deploy to production
deploy:production:
  stage: deploy
  image: alpine:latest
  dependencies:
    - docker:api
    - docker:web
    - docker:community
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_SERVER >> ~/.ssh/known_hosts
  script:
    - |
      ssh $PRODUCTION_USER@$PRODUCTION_SERVER << 'EOF'
        cd /opt/wisdomos
        
        # Pull latest images
        docker pull $REGISTRY/$CI_PROJECT_PATH/api:$IMAGE_TAG
        docker pull $REGISTRY/$CI_PROJECT_PATH/web:$IMAGE_TAG
        docker pull $REGISTRY/$CI_PROJECT_PATH/community:$IMAGE_TAG
        
        # Update docker-compose
        sed -i "s|api:.*|api:$IMAGE_TAG|g" docker-compose.production.yml
        sed -i "s|web:.*|web:$IMAGE_TAG|g" docker-compose.production.yml
        sed -i "s|community:.*|community:$IMAGE_TAG|g" docker-compose.production.yml
        
        # Zero-downtime deployment
        docker-compose -f docker-compose.production.yml up -d --no-deps web
        docker-compose -f docker-compose.production.yml up -d --no-deps community
        docker-compose -f docker-compose.production.yml up -d --no-deps api
        
        # Health check
        sleep 30
        curl -f http://localhost:3000/health || exit 1
        curl -f http://localhost:3001/health || exit 1
        curl -f http://localhost:3002/health || exit 1
        
        # Clean up
        docker image prune -f
      EOF
  environment:
    name: production
    url: https://wisdomos.com
  when: manual
  only:
    - main