import { describe, it, expect, beforeEach, vi } from 'vitest'
import { POST } from '@/app/api/hubspot/webhook/route'
import { NextRequest } from 'next/server'

describe('HubSpot Webhook Integration', () => {
  beforeEach(() => {
    vi.clearAllMocks()
    // Mock localStorage for Node environment
    global.localStorage = {
      getItem: vi.fn(() => '[]'),
      setItem: vi.fn(),
      removeItem: vi.fn(),
      clear: vi.fn(),
      length: 0,
      key: vi.fn()
    } as any
  })

  describe('POST /api/hubspot/webhook', () => {
    it('should process contact creation event and create Being contribution', async () => {
      const contactEvent = {
        eventId: 'test-contact-123',
        subscriptionType: 'contact.creation',
        portalId: 123456,
        objectId: 789,
        eventType: 'contact.creation',
        occurredAt: Date.now()
      }

      const request = new NextRequest('http://localhost:3000/api/hubspot/webhook', {
        method: 'POST',
        body: JSON.stringify([contactEvent]),
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const response = await POST(request)
      const data = await response.json()

      expect(response.status).toBe(200)
      expect(data.ok).toBe(true)
      expect(data.results.processed).toBeGreaterThan(0)
      
      // Check that contribution was created
      const savedData = JSON.parse(
        (global.localStorage.setItem as any).mock.calls[0]?.[1] || '[]'
      )
      expect(savedData).toHaveLength(1)
      expect(savedData[0].type).toBe('being')
    })

    it('should process deal property change and update Doing contribution', async () => {
      const dealEvent = {
        eventId: 'test-deal-456',
        subscriptionType: 'deal.propertyChange',
        portalId: 123456,
        objectId: 456,
        propertyName: 'dealstage',
        propertyValue: 'closedwon',
        eventType: 'deal.propertyChange',
        occurredAt: Date.now()
      }

      const request = new NextRequest('http://localhost:3000/api/hubspot/webhook', {
        method: 'POST',
        body: JSON.stringify([dealEvent]),
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const response = await POST(request)
      const data = await response.json()

      expect(response.status).toBe(200)
      expect(data.ok).toBe(true)
      expect(data.results.processed).toBeGreaterThan(0)
    })

    it('should handle idempotency - duplicate events should be skipped', async () => {
      const duplicateEvent = {
        eventId: 'duplicate-123',
        subscriptionType: 'contact.creation',
        portalId: 123456,
        objectId: 111,
        eventType: 'contact.creation',
        occurredAt: Date.now()
      }

      // Send first time
      const request1 = new NextRequest('http://localhost:3000/api/hubspot/webhook', {
        method: 'POST',
        body: JSON.stringify([duplicateEvent]),
        headers: {
          'Content-Type': 'application/json'
        }
      })
      
      const response1 = await POST(request1)
      const data1 = await response1.json()
      
      expect(data1.results.processed).toBe(1)
      expect(data1.results.skipped).toBe(0)

      // Send duplicate
      const request2 = new NextRequest('http://localhost:3000/api/hubspot/webhook', {
        method: 'POST',
        body: JSON.stringify([duplicateEvent]),
        headers: {
          'Content-Type': 'application/json'
        }
      })
      
      const response2 = await POST(request2)
      const data2 = await response2.json()
      
      expect(data2.results.processed).toBe(0)
      expect(data2.results.skipped).toBe(1)
    })

    it('should handle batch events correctly', async () => {
      const batchEvents = [
        {
          eventId: 'batch-1',
          subscriptionType: 'contact.creation',
          portalId: 123456,
          objectId: 201,
          eventType: 'contact.creation',
          occurredAt: Date.now()
        },
        {
          eventId: 'batch-2',
          subscriptionType: 'company.creation',
          portalId: 123456,
          objectId: 202,
          eventType: 'company.creation',
          occurredAt: Date.now()
        },
        {
          eventId: 'batch-3',
          subscriptionType: 'deal.creation',
          portalId: 123456,
          objectId: 203,
          eventType: 'deal.creation',
          occurredAt: Date.now()
        }
      ]

      const request = new NextRequest('http://localhost:3000/api/hubspot/webhook', {
        method: 'POST',
        body: JSON.stringify(batchEvents),
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const response = await POST(request)
      const data = await response.json()

      expect(response.status).toBe(200)
      expect(data.ok).toBe(true)
      expect(data.results.processed).toBe(3)
    })

    it('should reject invalid payloads', async () => {
      const request = new NextRequest('http://localhost:3000/api/hubspot/webhook', {
        method: 'POST',
        body: JSON.stringify({ invalid: 'payload' }),
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const response = await POST(request)
      const data = await response.json()

      expect(response.status).toBe(400)
      expect(data.error).toBe('Invalid payload format')
    })
  })
})